<%@ page language="java" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>



<c:url value="/libs" var="libsUrl" />
<c:url value="/webjars" var="webJarsUrl" />
<link href="${webJarsUrl}/bootstrap/5.3.8/css/bootstrap.min.css" rel="stylesheet">
<link href="${webJarsUrl}/bootstrap-icons/1.13.1/font/bootstrap-icons.min.css" rel="stylesheet">

<script src="${webJarsUrl}/popperjs__core/2.11.8/dist/umd/popper.min.js"></script>
<script src="${webJarsUrl}/bootstrap/5.3.8/js/bootstrap.min.js"></script>
<script src="${webJarsUrl}/vue/3.5.22/dist/vue.global.js"></script>

<% /* ---------- Some utils ------------ */ %>
<script type="text/javascript">
"use strict";
	// my Q&D data obj clone polyfill, used on VueJS reactive objects
	window.deepClone = function(v){return JSON.parse(JSON.stringify(v));};
</script>

<% /* ---------- REST API CLient ------------ */ %>
<script src="${webJarsUrl}/axios/1.12.2/dist/axios.min.js"></script>
<%-- TODO add axios retry on the stack ?... --%>
<script type="text/javascript">
"use strict";
	/* pre-configured for this web-app's own API */
	const axios_backend = axios.create({
		baseURL: "<c:url value="/api" />",
		//timeout: 1000,

		// promote failfast behaviour
		<%--
		// I tried in vain with :
		responseType: 'json', // supposed to be default, but silentJSONParsing : false needed that ?!...
		transitional: {
			silentJSONParsing: false, // default to true in current Axios version (1.12.x)
			forcedJSONParsing: false, // default to true, which is *absurd*. And it didn't stop JSON parsing of "text/plain".
		},
		--%>
		transformResponse: (response, headers, status) => {
			if (headers["content-type"] == "application/json") {
	 			try {
	 				return JSON.parse(response);
	 			} catch (parseError) {
	 				throw {
	 					"name" : "AcadiaJsonParsingError",
		 				"message" : parseError.message,
		 				"status" : status,
		 				"code": parseError.name,
		 				"config": {"method" : "(JSON parse)"} // TODO find access to request method
	 				};
	 			}
			} else {
				return response;
			}
		},

		transitional: {
			clarifyTimeoutError: true,
		},



		//headers: {'Authorization': 'xxxx'}, TODO

		<%-- Jax-RS doesn't require those PHP monkeying --%>
		paramsSerializer: {
			indexes: null // array indexes format (null - no brackets, false (default) - empty brackets, true - brackets with indexes)
		},
	});

	function showAxiosErrorDialog(error){
		console.warn("showAxiosErrorDialog", error);

		let dialog_message;
		switch(error.status) {
			case 400: /* BAD_REQUEST */{
				dialog_message = "Le serveur ne peut pas gérer cette requête. Veuillez signaler le problème à l'équipe de développement.";
			} break;
			case 404: /* NOT_FOUND */{
				dialog_message = "La resource demandée n'existe plus. Veuillez réessayer après avoir rafraîchi la page.";
			} break;
			case 409: /* CONFLICT */ {
				dialog_message = "Conflit de mise à jour, veuillez réessayer après avoir rafraîchi la page.";
			} break;
			default: {
				let best_message = error?.response?.data; // serverside, "may" be carefully written
				if (!best_message) best_message = error.message; // probably generated by "the platform" (App server / Axios / etc.)

				dialog_message = `Info. technique - \${error.code} : \${best_message}`;
				<%-- note : error.code is meant to be Axios internal error, not related to HTTP status,
				see https://github.com/axios/axios#error-types --%>

			}
		}

		alert_dialog(`Erreur appel API - HTTP <<\${error?.config?.method}>> \${error.status}`, dialog_message);
	}
</script>


